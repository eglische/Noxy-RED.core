[
    {
        "id": "1595882e0f579de3",
        "type": "tab",
        "label": "Noxy-RED.api Tutorial",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "675a23e0d48d3489",
        "type": "tab",
        "label": "Sex Toys Strokes",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "3d963a7e271e08c2",
        "type": "tab",
        "label": "Sex Toys Vibration",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "37c335b4644b5d52",
        "type": "tab",
        "label": "TP E530 Smart Bulb",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "15376ac01e2f58cc",
        "type": "mqtt-broker",
        "name": "Mosquitto",
        "broker": "127.0.0.1",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "871c41b82d42d34f",
        "type": "switch",
        "z": "1595882e0f579de3",
        "name": "Action Routing",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "intro",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "open_NodeRed",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "open_Word",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 420,
        "y": 180,
        "wires": [
            [
                "685c2dc29eca0d60",
                "10d2075129619935",
                "354eb980688f8dc8"
            ],
            [
                "f7c3738ee0b160c3"
            ],
            [
                "6232d047276456fa"
            ]
        ]
    },
    {
        "id": "917754daa05e8196",
        "type": "mqtt in",
        "z": "1595882e0f579de3",
        "name": "",
        "topic": "/noxyred/triggers",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15376ac01e2f58cc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 140,
        "wires": [
            [
                "871c41b82d42d34f"
            ]
        ]
    },
    {
        "id": "a7d09e0b03e9a3c6",
        "type": "comment",
        "z": "1595882e0f579de3",
        "name": "2.) Check if status is connected. This is the Incomming Way, that we get the Actions from Voxta to Node-RED",
        "info": "",
        "x": 370,
        "y": 100,
        "wires": []
    },
    {
        "id": "1bf1c366707c0c5c",
        "type": "mqtt in",
        "z": "1595882e0f579de3",
        "name": "",
        "topic": "/noxyred/chat",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15376ac01e2f58cc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 146.0500030517578,
        "y": 839.0499877929688,
        "wires": [
            [
                "d2fa85da14da5e10"
            ]
        ]
    },
    {
        "id": "d2fa85da14da5e10",
        "type": "debug",
        "z": "1595882e0f579de3",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 840,
        "wires": []
    },
    {
        "id": "d48bcaaa3b176e91",
        "type": "inject",
        "z": "1595882e0f579de3",
        "name": "Turn it off",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "SwitchChatTopic=false",
        "payloadType": "str",
        "x": 150,
        "y": 680,
        "wires": [
            [
                "cd12fcfcfb6f778c"
            ]
        ]
    },
    {
        "id": "cd12fcfcfb6f778c",
        "type": "mqtt out",
        "z": "1595882e0f579de3",
        "name": "/noxyred/chat",
        "topic": "/noxyred/chat",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15376ac01e2f58cc",
        "x": 410,
        "y": 680,
        "wires": []
    },
    {
        "id": "6f4e6bf99a8a7e4b",
        "type": "mqtt out",
        "z": "1595882e0f579de3",
        "name": "/noxyred/keyboard",
        "topic": "/noxyred/keyboard",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15376ac01e2f58cc",
        "x": 1360,
        "y": 640,
        "wires": []
    },
    {
        "id": "feccfa2043758d5f",
        "type": "inject",
        "z": "1595882e0f579de3",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[0x5B]",
        "payloadType": "str",
        "x": 1070,
        "y": 640,
        "wires": [
            [
                "b8762ff88f6c8b67"
            ]
        ]
    },
    {
        "id": "b8762ff88f6c8b67",
        "type": "delay",
        "z": "1595882e0f579de3",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1200,
        "y": 640,
        "wires": [
            [
                "6f4e6bf99a8a7e4b"
            ]
        ]
    },
    {
        "id": "9e806b2bbed87838",
        "type": "comment",
        "z": "1595882e0f579de3",
        "name": "6.) Enable Chat Output from Voxta into Noxy (experimental)",
        "info": "",
        "x": 270,
        "y": 560,
        "wires": []
    },
    {
        "id": "421c63f625aa162d",
        "type": "comment",
        "z": "1595882e0f579de3",
        "name": "7.) Example to send Windows Key after 2sec.",
        "info": "",
        "x": 1250,
        "y": 560,
        "wires": []
    },
    {
        "id": "ac4f6d84580ef7ed",
        "type": "comment",
        "z": "1595882e0f579de3",
        "name": "8.) Debug nodes are used for troubleshooting",
        "info": "",
        "x": 510,
        "y": 800,
        "wires": []
    },
    {
        "id": "1aecca094ebf16fd",
        "type": "comment",
        "z": "1595882e0f579de3",
        "name": "<- the green field is like a button you can toggle on and off",
        "info": "",
        "x": 650,
        "y": 840,
        "wires": []
    },
    {
        "id": "49afab7e4edc6eee",
        "type": "mqtt out",
        "z": "1595882e0f579de3",
        "name": "/noxyred/soundeffecttopic",
        "topic": "/noxyred/soundeffecttopic",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15376ac01e2f58cc",
        "x": 550,
        "y": 400,
        "wires": []
    },
    {
        "id": "685c2dc29eca0d60",
        "type": "trigger",
        "z": "1595882e0f579de3",
        "name": "Intro",
        "op1": "p_910",
        "op2": "/char Ready to test Noxy-RED with me?",
        "op1type": "str",
        "op2type": "str",
        "duration": "4",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 2,
        "x": 270,
        "y": 400,
        "wires": [
            [
                "49afab7e4edc6eee"
            ],
            [
                "9db69b01a7fa78b0"
            ]
        ]
    },
    {
        "id": "9db69b01a7fa78b0",
        "type": "mqtt out",
        "z": "1595882e0f579de3",
        "name": "/noxyred/messages",
        "topic": "/noxyred/messages",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15376ac01e2f58cc",
        "x": 530,
        "y": 440,
        "wires": []
    },
    {
        "id": "89af93fa56b43e3b",
        "type": "comment",
        "z": "1595882e0f579de3",
        "name": "4.) Example to trigger a Soundeffect you heared",
        "info": "",
        "x": 530,
        "y": 360,
        "wires": []
    },
    {
        "id": "cc8092fc8f672363",
        "type": "inject",
        "z": "1595882e0f579de3",
        "name": "Turn it on",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "SwitchChatTopic=true",
        "payloadType": "str",
        "x": 147.99998474121094,
        "y": 640,
        "wires": [
            [
                "63efef2393a9cc22"
            ]
        ]
    },
    {
        "id": "63efef2393a9cc22",
        "type": "mqtt out",
        "z": "1595882e0f579de3",
        "name": "/noxyred/chat",
        "topic": "/noxyred/chat",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15376ac01e2f58cc",
        "x": 407.99998474121094,
        "y": 640,
        "wires": []
    },
    {
        "id": "577a66fa06e77d3d",
        "type": "comment",
        "z": "1595882e0f579de3",
        "name": "Further examples:",
        "info": "[0x11, 0x30], // CTRL + 0\n[0x11, 0x41], // CTRL + A\n[0x11, 0x12, 0x2E], // CTRL + ALT + DEL\n\nOverview of the Virtual Key Codes:\nhttps://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes",
        "x": 1190,
        "y": 700,
        "wires": []
    },
    {
        "id": "4d26eec81b94d1d5",
        "type": "comment",
        "z": "1595882e0f579de3",
        "name": "[0x11, 0x30], // CTRL + 0",
        "info": "",
        "x": 1210,
        "y": 740,
        "wires": []
    },
    {
        "id": "fe86684ee4addc39",
        "type": "comment",
        "z": "1595882e0f579de3",
        "name": "[0x11, 0x41], // CTRL + A",
        "info": "",
        "x": 1210,
        "y": 780,
        "wires": []
    },
    {
        "id": "050fde293ca5538b",
        "type": "comment",
        "z": "1595882e0f579de3",
        "name": "[0x11, 0x12, 0x2E], // CTRL + ALT + DEL",
        "info": "",
        "x": 1260,
        "y": 820,
        "wires": []
    },
    {
        "id": "36b5fa41ce838b1e",
        "type": "voxta-context",
        "z": "1595882e0f579de3",
        "name": "Context Content",
        "contexts": [
            {
                "Name": "Nodes",
                "Text": "Nodes in Node-RED are located in the palette on the left side of the editor, categorized into sections such as input, output, function, and network nodes. Users can drag and drop nodes into the workspace to create automation workflows. To use nodes, open Node-RED, locate the palette, drag the desired node into the workspace, double-click to configure its properties, connect nodes by dragging a wire from one output to another input, and click Deploy to apply changes.\n\nKey nodes include the Inject Node, which manually triggers a flow at set intervals or on demand and sends timestamps, numbers, or specific payloads. The Debug Node displays messages in the debug panel for troubleshooting, useful for checking data flow in real-time. The Function Node allows custom JavaScript logic for advanced data processing. The Switch Node routes messages based on conditions, functioning like an \"if-else\" statement. The Change Node modifies message properties such as payload or topic, allowing users to set, delete, or move values. The Delay Node introduces a pause between message executions to manage flow timing. The Trigger Node sends a message upon activation and optionally another after a delay, useful for setting timers or controlling repeating actions.\n\nThese core nodes enable users to build powerful automation flows with minimal coding. If any changes are made to the flow, such as adding or removing nodes, the Deploy button in the top-right corner turns red. Only after clicking Deploy will the changes take effect.",
                "Disabled": false,
                "SetFlags": []
            },
            {
                "Name": "Flows",
                "Text": "Flows in Node-RED are visual representations of automation workflows, consisting of interconnected nodes that process and route messages. Each flow is a self-contained logic sequence that manages input, processes data, and triggers actions. A typical flow includes Input Nodes, such as Inject or MQTT, which initiate the process; Processing Nodes, like Function or Switch, which modify, filter, or analyze data; and Output Nodes, such as Debug, HTTP, or Database, which send results to their destinations. Flows run continuously or are triggered by events, enabling low-code automation for IoT, APIs, and system integrations.",
                "Disabled": false,
                "SetFlags": []
            },
            {
                "Name": "CurrentFlows",
                "Text": "The currently visible flows in Node-RED are: Noxy RED Tutorial which is active, Sex Toys Strokes which is inactive, Sex Toys Vibration which is also inactive, and TP Ei 530 Smart Bulb which again, is inactive. The later one serves as a demonstration for home automation with an affordable and functional lightbulb.\n\nFlows can be either active or deactivated. When a flow is active, it gets processed and functions as expected. If it is deactivated, Voxta cannot access its logic. To change the state of a flow, right-click on its tab and select either Activate or Deactivate accordingly.",
                "Disabled": false,
                "SetFlags": []
            },
            {
                "Name": "Debugging_Interface_Import_Export_Palette",
                "Text": "The Debug Panel in Node-RED is on the right side of the editor and displays messages from Debug nodes and system logs. It is useful for troubleshooting and monitoring message payloads. To access it, click the bug icon in the top-right corner. To display payloads, a Debug node must be attached to the node being tested. The Node-RED web interface runs in a browser, and the user currently sees the backend where the logic is created. By clicking the small triangle icon in the top-right area, the dashboard can be accessed. The dashboard allows for the creation of an interface with buttons, sliders, and information displays. Importing and exporting flows in Node-RED is done in JSON format. To export, open the menu in the top-right corner, select Export, choose the desired flows or nodes, then copy or download the JSON file. To import, open the menu, select Import, paste the JSON data or upload a JSON file, place it in the workspace, and click Deploy. JSON imports allow easy sharing and reuse of flows. The Palette on the left side contains available nodes for building flows. Additional nodes can be installed by opening the menu, selecting Manage Palette, navigating to the Install tab, searching for new nodes such as MQTT or Dashboard, and clicking Install to add them. The palette allows for customization and the extension of Node-RED’s functionality.",
                "Disabled": false,
                "SetFlags": []
            },
            {
                "Name": "Voxta_Custom_Nodes",
                "Text": "A collection of custom Node-RED nodes designed for seamless integration between Voxta and Node-RED. This pack includes nodes for registering actions, sending messages, triggering local keystrokes, creating event sequences, and managing context dynamically. These nodes allow users to graphically manage Voxta interactions and, when combined with Noxy-Red, enable rich integration with the local system through MQTT.\n\nThe Voxta Actions node lets users register actions with Voxta, such as commands executed at different stages of a conversation. Actions can be added, modified, or removed, with default triggers like \"AfterUserMessage\" or \"BeforeAssistantMessage.\" It also supports multi-selection for arrays, allowing dynamic add and remove functionality. The Voxta Messages node allows sending text messages back to Voxta from Node-RED, using short references for easy linking of multiple messages.\n\nThe Voxta Keys node sends VK (Virtual Key) formatted instructions to noxy-red.api to trigger keystrokes on the local machine. This is useful for simulation games or automation tasks where Voxta input needs to control keystrokes. It supports mapping text or number payloads to virtual keys, including modifier keys like CTRL, ALT, and SHIFT.\n\nThe Noxy Sequencer node enables sequential execution of a series of actions with optional delays. This is particularly useful for automating timed sequences such as device control or multi-step interactions. The node processes each element in the defined sequence one by one until completion. Output actions can send specified messages, with configurable output types like string, number, boolean, or JSON. Delays can be set to fixed or random ranges, with time units in milliseconds, seconds, or minutes. The sequence can be stopped at any time by sending a message payload of \"stop!\", which immediately resets the node to the beginning.\n\nThe Voxta Context node allows dynamic management of context entries within Voxta. Sending a message with a payload containing the context name activates and sends that context. If the name ends with an exclamation mark, it is marked as disabled. Otherwise, it remains enabled and visible to Voxta. This node is useful for controlling Voxta’s context dynamically based on user interactions.",
                "Disabled": false,
                "SetFlags": []
            },
            {
                "Name": "Access_Web_APP",
                "Text": "{char}} can open Word and the Node-RED interface upon request. If {{user}} asks for a demonstration, needs help accessing Node-RED, or wants to modify logic, {{char}} will offer to open Node-RED but will not perform the action automatically. Instead, {{char}} will respond with: \"I can open the Node-RED interface in your web browser. Would you like me to do that now?\"",
                "Disabled": false,
                "SetFlags": []
            },
            {
                "Name": "How_to_get_stimulated",
                "Text": "After the Initial Installation, All tabs but the Noxy-RED Tutorial are greyed out. If {{user}} wants to use either Stroke based Sex Toys or Vibrating one, he needs first to setup his Toy in the Multifunplayer. The Application has a Shortcut on the desktop, and in addition to that, it gets started every time Noxy Core is started. There he needs to interface with Buttplug.io. Once this works and is connected, {{user}} can Activate one of the two tabs in Node-Red. The first one is for Stroker, the second after that is for Vibration Toys.\n\nImportant: In Node-Red, the Tutorial Flow needs to be de-activated, and the correspoding Flow for Strokes or Vibration Activated.",
                "Disabled": false,
                "SetFlags": []
            }
        ],
        "x": 1340,
        "y": 140,
        "wires": [
            [
                "57479f0c3f1639ae"
            ]
        ]
    },
    {
        "id": "57479f0c3f1639ae",
        "type": "mqtt out",
        "z": "1595882e0f579de3",
        "name": "Dynamical Context Injection into Voxta",
        "topic": "/noxyred/context",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15376ac01e2f58cc",
        "x": 1710,
        "y": 140,
        "wires": []
    },
    {
        "id": "10d2075129619935",
        "type": "noxy-sequencer",
        "z": "1595882e0f579de3",
        "name": "",
        "sequence": [
            {
                "type": "output",
                "outputType": "string",
                "value": "Nodes"
            },
            {
                "type": "delay",
                "from": "100",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "Flows"
            },
            {
                "type": "delay",
                "from": "100",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "CurrentFlows"
            },
            {
                "type": "delay",
                "from": "100",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "Voxta_Custom_Nodes"
            },
            {
                "type": "delay",
                "from": "100",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "Access_Web_APP"
            },
            {
                "type": "delay",
                "from": "100",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "Debugging_Interface_Import_Export_Palette"
            },
            {
                "type": "delay",
                "from": "100",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "How_to_get_stimulated"
            }
        ],
        "outputs": 1,
        "outputLabels": [
            ""
        ],
        "x": 1060,
        "y": 140,
        "wires": [
            [
                "36b5fa41ce838b1e"
            ]
        ]
    },
    {
        "id": "f7c3738ee0b160c3",
        "type": "function",
        "z": "1595882e0f579de3",
        "name": "function 1",
        "func": "// Create the MQTT message payload\nmsg.payload = {\n    \"Type\": \"web\",\n    \"Value\": \"http://localhost:1880\"\n};\n\n// Convert the object to a JSON string\nmsg.payload = JSON.stringify(msg.payload);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 300,
        "wires": [
            [
                "1b7c36ac80122f43"
            ]
        ]
    },
    {
        "id": "1b7c36ac80122f43",
        "type": "mqtt out",
        "z": "1595882e0f579de3",
        "name": "/noxyred/app",
        "topic": "/noxyred/app",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15376ac01e2f58cc",
        "x": 1310,
        "y": 320,
        "wires": []
    },
    {
        "id": "6232d047276456fa",
        "type": "function",
        "z": "1595882e0f579de3",
        "name": "function 2",
        "func": "// Create the MQTT message payload\nmsg.payload = {\n    \"Type\": \"app\",\n    \"Value\": \"winword.exe\"\n};\n\n// Convert the object to a JSON string\nmsg.payload = JSON.stringify(msg.payload);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 340,
        "wires": [
            [
                "1b7c36ac80122f43"
            ]
        ]
    },
    {
        "id": "4a5570d76c709b7d",
        "type": "voxta-actions",
        "z": "1595882e0f579de3",
        "name": "",
        "index": 1,
        "actions": [
            {
                "name": "open_NodeRed",
                "description": "If {{user}} explicitly asks to open the web interface of Noxy-RED, {{char}} will perform the action. Otherwise, {{char}} will only mention its availability without executing it automatically. For example, {{char}} will respond with: 'I can open the Noxy-RED interface in your web browser. Would you like me to do that now?",
                "layer": "default",
                "timing": "AfterAssistantMessage",
                "setFlags": [],
                "secret": "",
                "note": "",
                "cancelReply": false
            },
            {
                "name": "open_Word",
                "description": "If {{user}} explicitly asks to open Word or requests a demonstration to start an application, {{char}} will perform the action. Otherwise, {{char}} will only mention that it can be done without executing it automatically. For example, {{char}} will respond with: 'I can open Word for you. Would you like me to do that now?'",
                "layer": "default",
                "timing": "AfterAssistantMessage",
                "setFlags": [],
                "secret": "If word ist not installed, or Office 365 is used, it won't work",
                "note": "",
                "cancelReply": false
            }
        ],
        "x": 1330,
        "y": 180,
        "wires": [
            [
                "01621cbe008225a5"
            ]
        ]
    },
    {
        "id": "354eb980688f8dc8",
        "type": "noxy-sequencer",
        "z": "1595882e0f579de3",
        "name": "",
        "sequence": [
            {
                "type": "output",
                "outputType": "string",
                "value": "open_NodeRed"
            },
            {
                "type": "delay",
                "from": "100",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "open_Word"
            }
        ],
        "outputs": 1,
        "outputLabels": [
            ""
        ],
        "x": 1060,
        "y": 180,
        "wires": [
            [
                "4a5570d76c709b7d"
            ]
        ]
    },
    {
        "id": "01621cbe008225a5",
        "type": "mqtt out",
        "z": "1595882e0f579de3",
        "name": "Dynamical Action Injection into Voxta",
        "topic": "/noxyred/actions",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15376ac01e2f58cc",
        "x": 1710,
        "y": 180,
        "wires": []
    },
    {
        "id": "f98b7b8b32d37006",
        "type": "comment",
        "z": "1595882e0f579de3",
        "name": "5.) Call up a Website or open an application",
        "info": "",
        "x": 1140,
        "y": 260,
        "wires": []
    },
    {
        "id": "0baa016964ad1991",
        "type": "comment",
        "z": "1595882e0f579de3",
        "name": "3.) How to register Context and Actions",
        "info": "",
        "x": 1110,
        "y": 100,
        "wires": []
    },
    {
        "id": "d2ef26e85b8297a0",
        "type": "comment",
        "z": "1595882e0f579de3",
        "name": "Could be used for TTS Enpoints or Discord/Telegram forward/capture",
        "info": "",
        "x": 300,
        "y": 600,
        "wires": []
    },
    {
        "id": "8d73142f1845c524",
        "type": "comment",
        "z": "1595882e0f579de3",
        "name": "We controll the Multifunplayer via Keystrokes in this manner",
        "info": "",
        "x": 1290,
        "y": 600,
        "wires": []
    },
    {
        "id": "51636528ba7052ed",
        "type": "comment",
        "z": "1595882e0f579de3",
        "name": "1.) Above this are the tabs. The grayed-out ones are inactive. Right-click on the tab and enable it to use it.",
        "info": "",
        "x": 410,
        "y": 20,
        "wires": []
    },
    {
        "id": "09e82d6b8ffd9947",
        "type": "comment",
        "z": "1595882e0f579de3",
        "name": "You can ask Noxy to open the Interface (this here you see) or open Word (if you got it installed)",
        "info": "",
        "x": 1180,
        "y": 380,
        "wires": []
    },
    {
        "id": "5c3e559946fd54c3",
        "type": "function",
        "z": "675a23e0d48d3489",
        "name": "Speed Controller",
        "func": "// Initialize state variables\nvar lastspeed = context.get('lastspeed') || 0;\nvar wasstarted = context.get('wasstarted') || false;\n\n// Define VR codes for speed control\nconst vr_codes = {\n    0: [0x11, 0x30], // CTRL + 0 (Stop)\n    1: [0x11, 0x31], // CTRL + 1\n    2: [0x11, 0x32], // CTRL + 2\n    3: [0x11, 0x33], // CTRL + 3\n    4: [0x11, 0x34], // CTRL + 4\n    5: [0x11, 0x35], // CTRL + 5\n    6: [0x11, 0x36], // CTRL + 6\n    7: [0x11, 0x37], // CTRL + 7 (Twist On)\n    8: [0x11, 0x38]  // CTRL + 8 (Twist Off)\n};\n\n// Function to get a random number within a given range (inclusive)\nfunction getRandomInRange(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n// Prepare the output messages\nlet output0 = null;\nlet output1 = null;\n\n// Helper function to format the array as a string \"[0x11, 0x30]\"\nfunction formatVrCode(code) {\n    return `[${code.map(byte => '0x' + byte.toString(16)).join(', ')}]`;\n}\n\n// Get the input command\nconst command = msg.payload.toLowerCase();\n\nswitch (command) {\n    case 'faster':\n        if (lastspeed < 7) {\n            lastspeed += 1;\n            output0 = { payload: formatVrCode(vr_codes[lastspeed]) };\n            if (lastspeed === 7) {\n                output1 = { payload: 'maxspeed' };\n            }\n        }\n        wasstarted = true;\n        break;\n\n    case 'slower':\n        if (lastspeed > 1) {\n            lastspeed -= 1;\n            output0 = { payload: formatVrCode(vr_codes[lastspeed]) };\n            if (lastspeed === 1) {\n                output1 = { payload: 'minspeed' };\n            }\n        }\n        wasstarted = true;\n        break;\n\n    case 'stop':\n        lastspeed = 0;\n        output0 = { payload: formatVrCode(vr_codes[0]) };\n        output1 = { payload: 'stop' };\n        wasstarted = false;\n        break;\n\n    case 'twiston':\n        output0 = { payload: formatVrCode(vr_codes[7]) }; // CTRL + 7\n        break;\n\n    case 'twistoff':\n        output0 = { payload: formatVrCode(vr_codes[8]) }; // CTRL + 8\n        break;\n\n    case 'speedslow':\n        lastspeed = getRandomInRange(1, 3); // CTRL 1-3\n        output0 = { payload: formatVrCode(vr_codes[lastspeed]) };\n        break;\n\n    case 'speedmedium':\n        lastspeed = getRandomInRange(3, 5); // CTRL 3-5\n        output0 = { payload: formatVrCode(vr_codes[lastspeed]) };\n        break;\n\n    case 'speedfast':\n        lastspeed = getRandomInRange(5, 7); // CTRL 5-7\n        output0 = { payload: formatVrCode(vr_codes[lastspeed]) };\n        break;\n\n    default:\n        node.warn(\"Invalid command received\");\n        return; // Exit the function to avoid loops\n}\n\n// Store the lastspeed and wasstarted state in the context\ncontext.set('lastspeed', lastspeed);\ncontext.set('wasstarted', wasstarted);\n\n// Return the outputs\nreturn [output0, output1];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 80,
        "wires": [
            [
                "3c79518818f8ca0e"
            ],
            []
        ]
    },
    {
        "id": "b0407f39b2f5e412",
        "type": "switch",
        "z": "675a23e0d48d3489",
        "name": "Action Routing",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "stop",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "faster",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "slower",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "twiston",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "twistoff",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "speedslow",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "speedmedium",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "speedfast",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "intro",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "chat_start_stroke",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "chat_start_stroketwist",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 11,
        "x": 400,
        "y": 240,
        "wires": [
            [
                "5c3e559946fd54c3"
            ],
            [
                "5c3e559946fd54c3"
            ],
            [
                "5c3e559946fd54c3"
            ],
            [
                "5c3e559946fd54c3"
            ],
            [
                "5c3e559946fd54c3"
            ],
            [
                "5c3e559946fd54c3"
            ],
            [
                "5c3e559946fd54c3"
            ],
            [
                "5c3e559946fd54c3"
            ],
            [
                "55b5b8e6b72c882b"
            ],
            [
                "05060ef90bdfc1d1",
                "87836a8fa921234a",
                "5af6a44d5f90d71c",
                "9c889129f701ac3d"
            ],
            [
                "05060ef90bdfc1d1",
                "6f5e29d4de152f8c",
                "4a1e886d74c69bae",
                "9c889129f701ac3d"
            ]
        ]
    },
    {
        "id": "9295f83a2bed0201",
        "type": "mqtt in",
        "z": "675a23e0d48d3489",
        "name": "",
        "topic": "/noxyred/triggers",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15376ac01e2f58cc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 240,
        "wires": [
            [
                "b0407f39b2f5e412"
            ]
        ]
    },
    {
        "id": "3c79518818f8ca0e",
        "type": "mqtt out",
        "z": "675a23e0d48d3489",
        "name": "/noxyred/keyboard",
        "topic": "/noxyred/keyboard",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15376ac01e2f58cc",
        "x": 1520,
        "y": 80,
        "wires": []
    },
    {
        "id": "64c8422f639239f4",
        "type": "mqtt in",
        "z": "675a23e0d48d3489",
        "name": "",
        "topic": "/noxyred/vam",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15376ac01e2f58cc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 280,
        "wires": [
            [
                "b0407f39b2f5e412"
            ]
        ]
    },
    {
        "id": "ace48255255481ad",
        "type": "comment",
        "z": "675a23e0d48d3489",
        "name": "This Example is for Linear Movements / Strokes",
        "info": "",
        "x": 260,
        "y": 60,
        "wires": []
    },
    {
        "id": "363d7b48c2087283",
        "type": "mqtt out",
        "z": "675a23e0d48d3489",
        "name": "Dynamical Action Injection into Voxta",
        "topic": "/noxyred/actions",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15376ac01e2f58cc",
        "x": 1590,
        "y": 640,
        "wires": []
    },
    {
        "id": "727c3155099955ab",
        "type": "mqtt out",
        "z": "675a23e0d48d3489",
        "name": "Dynamical Context Injection into Voxta",
        "topic": "/noxyred/context",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15376ac01e2f58cc",
        "x": 1590,
        "y": 820,
        "wires": []
    },
    {
        "id": "5af6a44d5f90d71c",
        "type": "voxta-context",
        "z": "675a23e0d48d3489",
        "name": "Context Injection",
        "contexts": [
            {
                "Name": "stroker",
                "Text": "{{char}} controls now a stroker robot sextoy and will begin to please {{user}} with it. it will stroke {{user}} and sexually pleasure him. {{char}} can incrementally increase or decrease the speed of the strokes, by going faster or slower. in addition to that, {{char}} can also choose random speeds: speedslow, speedmedium and speedfast.",
                "Disabled": false,
                "SetFlags": []
            }
        ],
        "x": 1060,
        "y": 820,
        "wires": [
            [
                "727c3155099955ab"
            ]
        ]
    },
    {
        "id": "022aabd5f0653fef",
        "type": "voxta-actions",
        "z": "675a23e0d48d3489",
        "name": "",
        "index": 1,
        "actions": [
            {
                "name": "stop",
                "description": "when {{char}} wants to stop stroking {{user}}",
                "layer": "default",
                "timing": "AfterAssistantMessage",
                "setFlags": [],
                "secret": "",
                "note": "",
                "cancelReply": false
            },
            {
                "name": "faster",
                "description": "when {{char}} wants to stroke {{user}} faster",
                "layer": "default",
                "timing": "AfterAssistantMessage",
                "setFlags": [],
                "secret": "",
                "note": "",
                "cancelReply": false
            },
            {
                "name": "slower",
                "description": "when {{char}} wants to stroke {{user}} slower",
                "layer": "default",
                "timing": "AfterAssistantMessage",
                "setFlags": [],
                "secret": "",
                "note": "",
                "cancelReply": false
            },
            {
                "name": "twiston",
                "description": "when {{char}} wants to enable the twist function on the stroker",
                "layer": "default",
                "timing": "AfterAssistantMessage",
                "setFlags": [],
                "secret": "",
                "note": "",
                "cancelReply": false
            },
            {
                "name": "twistoff",
                "description": "when {{char}} wants to disable the twist function on the stroker",
                "layer": "default",
                "timing": "AfterAssistantMessage",
                "setFlags": [],
                "secret": "",
                "note": "",
                "cancelReply": false
            },
            {
                "name": "speedslow",
                "description": "when {{char}} wants to choose a random slow speed",
                "layer": "default",
                "timing": "AfterAssistantMessage",
                "setFlags": [],
                "secret": "",
                "note": "",
                "cancelReply": false
            },
            {
                "name": "speedmedium",
                "description": "when {{char}} wants to choose a random medium speed",
                "layer": "default",
                "timing": "AfterAssistantMessage",
                "setFlags": [],
                "secret": "",
                "note": "",
                "cancelReply": false
            },
            {
                "name": "speedfast",
                "description": "when {{char}} wants to choose a random fast speed",
                "layer": "default",
                "timing": "AfterAssistantMessage",
                "setFlags": [],
                "secret": "",
                "note": "",
                "cancelReply": false
            }
        ],
        "x": 1290,
        "y": 640,
        "wires": [
            [
                "363d7b48c2087283"
            ]
        ]
    },
    {
        "id": "87836a8fa921234a",
        "type": "noxy-sequencer",
        "z": "675a23e0d48d3489",
        "name": "",
        "sequence": [
            {
                "type": "output",
                "outputType": "string",
                "value": "stop"
            },
            {
                "type": "delay",
                "from": "100",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "faster"
            },
            {
                "type": "delay",
                "from": "100",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "slower"
            },
            {
                "type": "delay",
                "from": "100",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "speedslow"
            },
            {
                "type": "delay",
                "from": "100",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "speedmedium"
            },
            {
                "type": "delay",
                "from": "100",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "speedfast"
            }
        ],
        "outputs": 1,
        "outputLabels": [
            ""
        ],
        "x": 1060,
        "y": 640,
        "wires": [
            [
                "022aabd5f0653fef"
            ]
        ]
    },
    {
        "id": "d9112fb0f74f6fec",
        "type": "comment",
        "z": "675a23e0d48d3489",
        "name": "Injecting inicial Actions",
        "info": "",
        "x": 1080,
        "y": 600,
        "wires": []
    },
    {
        "id": "7227b045c47b9534",
        "type": "mqtt out",
        "z": "675a23e0d48d3489",
        "name": "Dynamical Context Injection into Voxta",
        "topic": "/noxyred/context",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15376ac01e2f58cc",
        "x": 1590,
        "y": 860,
        "wires": []
    },
    {
        "id": "6f5e29d4de152f8c",
        "type": "voxta-context",
        "z": "675a23e0d48d3489",
        "name": "Context Injection",
        "contexts": [
            {
                "Name": "stroker_with_twist",
                "Text": "{{char}} controls now a stroker robot sextoy and will begin to please {{user}} with it. it will stroke {{user}} and sexually pleasure him. In addition to stroking his cock, {{char}} can also enable the machine to twist around his cock while it goes up and down, increasing the pleasure even further. {{char}} can incrementally increase or decrease the speed of the strokes, by going faster or slower. in addition to that, {{char}} can also choose random speeds: speedslow, speedmedium and speedfast.",
                "Disabled": false,
                "SetFlags": []
            }
        ],
        "x": 1060,
        "y": 860,
        "wires": [
            [
                "7227b045c47b9534"
            ]
        ]
    },
    {
        "id": "dc0a7a3484a7f113",
        "type": "comment",
        "z": "675a23e0d48d3489",
        "name": "Injecting Context",
        "info": "",
        "x": 1060,
        "y": 780,
        "wires": []
    },
    {
        "id": "afca23e23f998e3d",
        "type": "mqtt out",
        "z": "675a23e0d48d3489",
        "name": "Dynamical Action Injection into Voxta",
        "topic": "/noxyred/actions",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15376ac01e2f58cc",
        "x": 1590,
        "y": 440,
        "wires": []
    },
    {
        "id": "a0d3fbbea20cee40",
        "type": "voxta-actions",
        "z": "675a23e0d48d3489",
        "name": "",
        "index": 1,
        "actions": [
            {
                "name": "chat_start_stroketwist",
                "description": "when {{char}} has been told that {{user}} has a sex toy that can stroke and twist",
                "layer": "default",
                "timing": "AfterAssistantMessage",
                "setFlags": [],
                "secret": "",
                "note": "",
                "cancelReply": false
            },
            {
                "name": "chat_start_stroke",
                "description": "when {{char}} has been told that {{user}} has a sex toy that only strokes",
                "layer": "default",
                "timing": "AfterAssistantMessage",
                "setFlags": [],
                "secret": "",
                "note": "",
                "cancelReply": false
            }
        ],
        "x": 1290,
        "y": 440,
        "wires": [
            [
                "afca23e23f998e3d"
            ]
        ]
    },
    {
        "id": "3dced740b31dddc4",
        "type": "noxy-sequencer",
        "z": "675a23e0d48d3489",
        "name": "Add Actions",
        "sequence": [
            {
                "type": "output",
                "outputType": "string",
                "value": "chat_start_stroke"
            },
            {
                "type": "delay",
                "from": "100",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "chat_start_stroketwist"
            }
        ],
        "outputs": 1,
        "outputLabels": [
            ""
        ],
        "x": 1050,
        "y": 440,
        "wires": [
            [
                "a0d3fbbea20cee40"
            ]
        ]
    },
    {
        "id": "9b600937725194b1",
        "type": "comment",
        "z": "675a23e0d48d3489",
        "name": "Initial Question / Setup",
        "info": "",
        "x": 1080,
        "y": 400,
        "wires": []
    },
    {
        "id": "b8557f3ebe33cbdc",
        "type": "mqtt out",
        "z": "675a23e0d48d3489",
        "name": "/noxyred/messages",
        "topic": "/noxyred/messages",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15376ac01e2f58cc",
        "x": 1530,
        "y": 280,
        "wires": []
    },
    {
        "id": "a248ab25ac7268b1",
        "type": "change",
        "z": "675a23e0d48d3489",
        "name": "Question",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "/event ask first what type of stroker is used, either only strokes or stroke and twist module, meaning, if twist is aviable, while beeing stroked the sleeve will also turn while actuated. be specific in your question because it is a technical detail important. respond to either answer positive",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1300,
        "y": 280,
        "wires": [
            [
                "b8557f3ebe33cbdc"
            ]
        ]
    },
    {
        "id": "55b5b8e6b72c882b",
        "type": "delay",
        "z": "675a23e0d48d3489",
        "name": "Delay for Chat Init",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 890,
        "y": 320,
        "wires": [
            [
                "a248ab25ac7268b1",
                "3dced740b31dddc4",
                "4bd1f84278114556"
            ]
        ]
    },
    {
        "id": "05060ef90bdfc1d1",
        "type": "noxy-sequencer",
        "z": "675a23e0d48d3489",
        "name": "Remove Actions",
        "sequence": [
            {
                "type": "output",
                "outputType": "string",
                "value": "chat_start_stroke!"
            },
            {
                "type": "delay",
                "from": "100",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "chat_start_stroketwist!"
            }
        ],
        "outputs": 1,
        "outputLabels": [
            ""
        ],
        "x": 1060,
        "y": 480,
        "wires": [
            [
                "a0d3fbbea20cee40"
            ]
        ]
    },
    {
        "id": "4a1e886d74c69bae",
        "type": "noxy-sequencer",
        "z": "675a23e0d48d3489",
        "name": "",
        "sequence": [
            {
                "type": "output",
                "outputType": "string",
                "value": "stop"
            },
            {
                "type": "delay",
                "from": "100",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "faster"
            },
            {
                "type": "delay",
                "from": "100",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "slower"
            },
            {
                "type": "delay",
                "from": "100",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "twiston"
            },
            {
                "type": "delay",
                "from": "100",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "twistoff"
            },
            {
                "type": "delay",
                "from": "100",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "speedslow"
            },
            {
                "type": "delay",
                "from": "100",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "speedmedium"
            },
            {
                "type": "delay",
                "from": "100",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "speedfast"
            }
        ],
        "outputs": 1,
        "outputLabels": [
            ""
        ],
        "x": 1060,
        "y": 680,
        "wires": [
            [
                "022aabd5f0653fef"
            ]
        ]
    },
    {
        "id": "3db4de9817349733",
        "type": "mqtt out",
        "z": "675a23e0d48d3489",
        "name": "/noxyred/autoreply",
        "topic": "/noxyred/autoreply",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15376ac01e2f58cc",
        "x": 1530,
        "y": 180,
        "wires": []
    },
    {
        "id": "4bd1f84278114556",
        "type": "change",
        "z": "675a23e0d48d3489",
        "name": "set autoreply off for the question",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "off",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1250,
        "y": 140,
        "wires": [
            [
                "3db4de9817349733"
            ]
        ]
    },
    {
        "id": "9c889129f701ac3d",
        "type": "change",
        "z": "675a23e0d48d3489",
        "name": "set autoreply to 20sec",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "20000",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 200,
        "wires": [
            [
                "3db4de9817349733"
            ]
        ]
    },
    {
        "id": "f98ed4f6cae7a6d1",
        "type": "mqtt in",
        "z": "3d963a7e271e08c2",
        "name": "",
        "topic": "/noxyred/triggers",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15376ac01e2f58cc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 440,
        "wires": [
            [
                "2a96e992bbe8e496"
            ]
        ]
    },
    {
        "id": "2a96e992bbe8e496",
        "type": "switch",
        "z": "3d963a7e271e08c2",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "intro",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "slower",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "faster",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "speedslow",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "speedmedium",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "speedfast",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "stop",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "constriction_on",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "constriction_off",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 10,
        "x": 290,
        "y": 440,
        "wires": [
            [
                "f5d2e7b086a12449",
                "03c2d5cb96a61dd8",
                "a0a0ed820e2cee71"
            ],
            [
                "ce5e43c7bf1ee21b",
                "b7b9ecda7adbb958"
            ],
            [
                "ce5e43c7bf1ee21b",
                "c278b16c2bce4327"
            ],
            [
                "ce5e43c7bf1ee21b",
                "b7b9ecda7adbb958"
            ],
            [
                "ce5e43c7bf1ee21b",
                "b7b9ecda7adbb958",
                "c278b16c2bce4327"
            ],
            [
                "ce5e43c7bf1ee21b",
                "c278b16c2bce4327"
            ],
            [
                "ce5e43c7bf1ee21b",
                "03c2d5cb96a61dd8"
            ],
            [
                "e9f6054f803c6ee2",
                "6ae1c32a28d025c2"
            ],
            [
                "e9f6054f803c6ee2",
                "6ae1c32a28d025c2"
            ],
            [
                "b7154b746867fc8f"
            ]
        ]
    },
    {
        "id": "ce5e43c7bf1ee21b",
        "type": "function",
        "z": "3d963a7e271e08c2",
        "name": "Speed Controller",
        "func": "// Initialize state variables\nvar lastspeed = context.get('lastspeed') || 0;\nvar wasstarted = context.get('wasstarted') || false;\n\n// Define VR codes for speed control\nconst vr_codes = {\n    0: [0x11, 0x30], // CTRL + 0 (Stop)\n    1: [0x11, 0x31], // CTRL + 1\n    2: [0x11, 0x32], // CTRL + 2\n    3: [0x11, 0x33], // CTRL + 3\n    4: [0x11, 0x34], // CTRL + 4\n    5: [0x11, 0x35], // CTRL + 5\n    6: [0x11, 0x36], // CTRL + 6\n    7: [0x11, 0x37], // CTRL + 7\n    8: [0x11, 0x38], // CTRL + 8\n    9: [0x11, 0x39]  // CTRL + 9\n};\n\n// Helper function to format the array as a string \"[0x11, 0x30]\"\nfunction formatVrCode(code) {\n    return `[${code.map(byte => '0x' + byte.toString(16)).join(', ')}]`;\n}\n\n// Function to get a random number within a given range (inclusive)\nfunction getRandomInRange(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n// Get the input command\nconst command = msg.payload.toLowerCase();\n\n// Function to set debug status\nfunction updateStatus(text) {\n    node.status({ fill: \"blue\", shape: \"dot\", text: text });\n}\n\nlet output0 = null;\nlet output1 = null;\n\nswitch (command) {\n    case 'faster':\n        if (lastspeed < 9) {\n            lastspeed += 1;\n            output0 = { payload: formatVrCode(vr_codes[lastspeed]) };\n        }\n        wasstarted = true;\n        updateStatus(`Last command: ${command}, Speed: ${lastspeed}`);\n        output1 = { payload: `speed${lastspeed}` };\n        break;\n\n    case 'slower':\n        if (lastspeed > 1) {\n            lastspeed -= 1;\n            output0 = { payload: formatVrCode(vr_codes[lastspeed]) };\n        }\n        wasstarted = true;\n        updateStatus(`Last command: ${command}, Speed: ${lastspeed}`);\n        output1 = { payload: `speed${lastspeed}` };\n        break;\n\n    case 'stop':\n        lastspeed = 0;\n        output0 = { payload: formatVrCode(vr_codes[0]) };\n        output1 = { payload: 'stop' };\n        wasstarted = false;\n        updateStatus(`Last command: ${command}, Speed: ${lastspeed}`);\n        break;\n\n    case 'speedslow':\n        lastspeed = getRandomInRange(1, 4);\n        output0 = { payload: formatVrCode(vr_codes[lastspeed]) };\n        output1 = { payload: `speed${lastspeed}` };\n        updateStatus(`Last command: ${command}, Speed: ${lastspeed}`);\n        break;\n\n    case 'speedmedium':\n        lastspeed = getRandomInRange(4, 6);\n        output0 = { payload: formatVrCode(vr_codes[lastspeed]) };\n        output1 = { payload: `speed${lastspeed}` };\n        updateStatus(`Last command: ${command}, Speed: ${lastspeed}`);\n        break;\n\n    case 'speedfast':\n        lastspeed = getRandomInRange(7, 9);\n        output0 = { payload: formatVrCode(vr_codes[lastspeed]) };\n        output1 = { payload: `speed${lastspeed}` };\n        updateStatus(`Last command: ${command}, Speed: ${lastspeed}`);\n        break;\n\n    default:\n        node.warn(\"Invalid command received\");\n        updateStatus(\"Invalid command\");\n        return;\n}\n\n// Store the lastspeed and wasstarted state in the context\ncontext.set('lastspeed', lastspeed);\ncontext.set('wasstarted', wasstarted);\n\n// Return the outputs\nreturn [output0, output1];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 440,
        "wires": [
            [
                "7cccd38f913cd590"
            ],
            [
                "e9f6054f803c6ee2"
            ]
        ]
    },
    {
        "id": "7cccd38f913cd590",
        "type": "mqtt out",
        "z": "3d963a7e271e08c2",
        "name": "/noxyred/keyboard",
        "topic": "/noxyred/keyboard",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15376ac01e2f58cc",
        "x": 1360,
        "y": 440,
        "wires": []
    },
    {
        "id": "f16ed8395b02d280",
        "type": "voxta-actions",
        "z": "3d963a7e271e08c2",
        "name": "Action Registration",
        "index": 1,
        "actions": [
            {
                "name": "speedslow",
                "description": "when {{char}} wants to stroke {{user}} slow",
                "layer": "default",
                "timing": "AfterAssistantMessage",
                "setFlags": [],
                "secret": "",
                "note": "",
                "cancelReply": false
            },
            {
                "name": "speedmedium",
                "description": "when {{char}} wants to stroke {{user}} moderate fast",
                "layer": "default",
                "timing": "AfterAssistantMessage",
                "setFlags": [],
                "secret": "",
                "note": "",
                "cancelReply": false
            },
            {
                "name": "speedfast",
                "description": "when {{char}} wants to stroke {{user}} fast, making him climax eventually",
                "layer": "default",
                "timing": "AfterAssistantMessage",
                "setFlags": [],
                "secret": "",
                "note": "",
                "cancelReply": false
            },
            {
                "name": "stop",
                "description": "when {{char}} wants to stop the machine for a moment and halt the sexual stimulation of {{user}}",
                "layer": "default",
                "timing": "AfterAssistantMessage",
                "setFlags": [],
                "secret": "",
                "note": "",
                "cancelReply": false
            },
            {
                "name": "faster",
                "description": "when {{char}} wants to stroke gradually faster than she is right now",
                "layer": "default",
                "timing": "AfterAssistantMessage",
                "setFlags": [],
                "secret": "",
                "note": "",
                "cancelReply": false
            },
            {
                "name": "slower",
                "description": "when {{char}} wants to stroke gradually slower than she is doing right now",
                "layer": "default",
                "timing": "AfterAssistantMessage",
                "setFlags": [],
                "secret": "",
                "note": "",
                "cancelReply": false
            },
            {
                "name": "constriction_on",
                "description": "when {{char}} is asked to enable the constriction and squeezing of the sex toy",
                "layer": "default",
                "timing": "AfterAssistantMessage",
                "setFlags": [],
                "secret": "",
                "note": "",
                "cancelReply": false
            },
            {
                "name": "constriction_off",
                "description": "when {{char}} is asked to stop clenching her pussy",
                "layer": "default",
                "timing": "AfterAssistantMessage",
                "setFlags": [],
                "secret": "",
                "note": "",
                "cancelReply": false
            }
        ],
        "x": 1090,
        "y": 120,
        "wires": [
            [
                "deeed0c1f42383d4"
            ]
        ]
    },
    {
        "id": "deeed0c1f42383d4",
        "type": "mqtt out",
        "z": "3d963a7e271e08c2",
        "name": "action registration",
        "topic": "/noxyred/actions",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15376ac01e2f58cc",
        "x": 1370,
        "y": 120,
        "wires": []
    },
    {
        "id": "f2300f19234a6fc6",
        "type": "comment",
        "z": "3d963a7e271e08c2",
        "name": "Action Handling Logic",
        "info": "",
        "x": 580,
        "y": 80,
        "wires": []
    },
    {
        "id": "b7154b746867fc8f",
        "type": "debug",
        "z": "3d963a7e271e08c2",
        "name": "wrong declaration of actions",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 200,
        "y": 560,
        "wires": []
    },
    {
        "id": "df663efab06ab3f6",
        "type": "mqtt out",
        "z": "3d963a7e271e08c2",
        "name": "/noxyred/autoreply",
        "topic": "/noxyred/autoreply",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15376ac01e2f58cc",
        "x": 1370,
        "y": 360,
        "wires": []
    },
    {
        "id": "2cb643249145366b",
        "type": "comment",
        "z": "3d963a7e271e08c2",
        "name": "Set Autoreply to 30sec",
        "info": "",
        "x": 1200,
        "y": 320,
        "wires": []
    },
    {
        "id": "f5d2e7b086a12449",
        "type": "change",
        "z": "3d963a7e271e08c2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "30000",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 360,
        "wires": [
            [
                "df663efab06ab3f6"
            ]
        ]
    },
    {
        "id": "b7b9ecda7adbb958",
        "type": "change",
        "z": "3d963a7e271e08c2",
        "name": "faster active",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "faster",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 200,
        "wires": [
            [
                "f16ed8395b02d280"
            ]
        ]
    },
    {
        "id": "c278b16c2bce4327",
        "type": "change",
        "z": "3d963a7e271e08c2",
        "name": "slower active",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "slower",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 160,
        "wires": [
            [
                "f16ed8395b02d280"
            ]
        ]
    },
    {
        "id": "03c2d5cb96a61dd8",
        "type": "noxy-sequencer",
        "z": "3d963a7e271e08c2",
        "name": "Speed Inital Actions",
        "sequence": [
            {
                "type": "output",
                "outputType": "string",
                "value": "speedslow"
            },
            {
                "type": "delay",
                "from": "1",
                "to": "",
                "unit": "seconds"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "speedmedium"
            },
            {
                "type": "delay",
                "from": "1",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "speedfast"
            },
            {
                "type": "delay",
                "from": "1",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "stop"
            },
            {
                "type": "delay",
                "from": "1",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "faster"
            },
            {
                "type": "delay",
                "from": "1",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "constriction_on"
            }
        ],
        "outputs": 1,
        "outputLabels": [
            ""
        ],
        "x": 590,
        "y": 120,
        "wires": [
            [
                "f16ed8395b02d280"
            ]
        ]
    },
    {
        "id": "6ae1c32a28d025c2",
        "type": "switch",
        "z": "3d963a7e271e08c2",
        "name": "Constrictor Registration",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "constriction_on",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "constriction_off",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 260,
        "wires": [
            [
                "4102b04637f4a58d",
                "4e3a499402d768ae"
            ],
            [
                "bca90fe9556755b7",
                "da0d7b43a6cbae46"
            ]
        ]
    },
    {
        "id": "4102b04637f4a58d",
        "type": "change",
        "z": "3d963a7e271e08c2",
        "name": "remove",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "constriction_on!",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 240,
        "wires": [
            [
                "f16ed8395b02d280"
            ]
        ]
    },
    {
        "id": "4e3a499402d768ae",
        "type": "change",
        "z": "3d963a7e271e08c2",
        "name": "add",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "constriction_off",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 200,
        "wires": [
            [
                "f16ed8395b02d280"
            ]
        ]
    },
    {
        "id": "da0d7b43a6cbae46",
        "type": "change",
        "z": "3d963a7e271e08c2",
        "name": "remove",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "constriction_off!",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 300,
        "wires": [
            [
                "f16ed8395b02d280"
            ]
        ]
    },
    {
        "id": "bca90fe9556755b7",
        "type": "change",
        "z": "3d963a7e271e08c2",
        "name": "add",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "constriction_on",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 340,
        "wires": [
            [
                "f16ed8395b02d280"
            ]
        ]
    },
    {
        "id": "290a49d845185d70",
        "type": "voxta-context",
        "z": "3d963a7e271e08c2",
        "name": "",
        "contexts": [
            {
                "Name": "constriction",
                "Text": "constriction simulates how a pussy clinches or wraps around the cock. this functionallity is on some sex toys very noisy. therefore only use it if {{user}} asks to engage it. and disengage it if asked to.",
                "Disabled": false,
                "SetFlags": []
            }
        ],
        "x": 1150,
        "y": 400,
        "wires": [
            [
                "df7435a3de09b2cc"
            ]
        ]
    },
    {
        "id": "a0a0ed820e2cee71",
        "type": "change",
        "z": "3d963a7e271e08c2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "constriction",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 400,
        "wires": [
            [
                "290a49d845185d70"
            ]
        ]
    },
    {
        "id": "df7435a3de09b2cc",
        "type": "mqtt out",
        "z": "3d963a7e271e08c2",
        "name": "Dynamical Context Injection into Voxta",
        "topic": "/noxyred/context",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15376ac01e2f58cc",
        "x": 1430,
        "y": 400,
        "wires": []
    },
    {
        "id": "e9f6054f803c6ee2",
        "type": "function",
        "z": "3d963a7e271e08c2",
        "name": "Constrict Controller",
        "func": "// Initialize state variables\nvar lastspeed = context.get('lastspeed') || 0;\nvar constrictionActive = context.get('constrictionActive') || false;\nvar constrictionInterval = context.get('constrictionInterval');\n\n// Define constrict codes\nconst constrict_codes = {\n    1: [0x11, 0x61], // CTRL + Numpad1 (constrict1)\n    2: [0x11, 0x62], // CTRL + Numpad2 (constrict2)\n    3: [0x11, 0x63]  // CTRL + Numpad3 (constrict3)\n};\n\n// Function to get a random delay in the specified range\nfunction getRandomDelay(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n// Function to update node status\nfunction updateStatus(text) {\n    node.status({ fill: \"blue\", shape: \"dot\", text: text });\n}\n\n// Function to start constriction cycling\nfunction startConstriction() {\n    if (constrictionInterval) clearInterval(constrictionInterval);\n\n    if (lastspeed >= 1 && lastspeed <= 4) {\n        let toggle = true;\n        constrictionInterval = setInterval(() => {\n            let constrictCmd = toggle ? constrict_codes[1] : constrict_codes[2];\n            node.send({ payload: `[${constrictCmd.map(byte => '0x' + byte.toString(16)).join(', ')}]` });\n            updateStatus(`On: ${toggle ? 'constrict1' : 'constrict2'}`);\n            toggle = !toggle;\n        }, getRandomDelay(1500, 2000));\n    } else if (lastspeed >= 4 && lastspeed <= 6) {\n        let toggle = true;\n        constrictionInterval = setInterval(() => {\n            let constrictCmd = toggle ? constrict_codes[1] : constrict_codes[2];\n            node.send({ payload: `[${constrictCmd.map(byte => '0x' + byte.toString(16)).join(', ')}]` });\n            updateStatus(`On: ${toggle ? 'constrict1' : 'constrict2'}`);\n            toggle = !toggle;\n        }, getRandomDelay(1000, 1500));\n    } else if (lastspeed >= 7 && lastspeed <= 9) {\n        let count = 1;\n        let direction = 1;\n        constrictionInterval = setInterval(() => {\n            let constrictCmd = constrict_codes[count];\n            node.send({ payload: `[${constrictCmd.map(byte => '0x' + byte.toString(16)).join(', ')}]` });\n            updateStatus(`On: constrict${count}`);\n            count += direction;\n            if (count === 3) direction = -1;\n            if (count === 1) direction = 1;\n        }, getRandomDelay(800, 1400));\n    }\n    context.set('constrictionInterval', constrictionInterval);\n}\n\n// Get input command\nconst command = msg.payload.toLowerCase();\n\nswitch (command) {\n    case 'constriction_on':\n        if (!constrictionActive) {\n            constrictionActive = true;\n            startConstriction();\n        }\n        break;\n\n    case 'constriction_off':\n        constrictionActive = false;\n        if (constrictionInterval) clearInterval(constrictionInterval);\n        constrictionInterval = null;\n        updateStatus(\"Off\");\n        break;\n\n    default:\n        if (command.startsWith('speed')) {\n            let speedValue = parseInt(command.replace('speed', ''), 10);\n            if (!isNaN(speedValue)) {\n                lastspeed = speedValue;\n                context.set('lastspeed', lastspeed);\n                if (constrictionActive) {\n                    startConstriction();\n                }\n            }\n        }\n        break;\n}\n\n// Store constriction state\ncontext.set('constrictionActive', constrictionActive);\ncontext.set('constrictionInterval', constrictionInterval);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 480,
        "wires": [
            [
                "7cccd38f913cd590"
            ]
        ]
    },
    {
        "id": "568eee2acd1f548b",
        "type": "mqtt in",
        "z": "3d963a7e271e08c2",
        "name": "",
        "topic": "/noxyred/vam",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15376ac01e2f58cc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 480,
        "wires": [
            [
                "2a96e992bbe8e496"
            ]
        ]
    },
    {
        "id": "722af0f936f0de8b",
        "type": "debug",
        "z": "37c335b4644b5d52",
        "name": "Payload Debug for Smartplug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 280,
        "wires": []
    },
    {
        "id": "874f3b2a1bd17550",
        "type": "change",
        "z": "37c335b4644b5d52",
        "name": "on",
        "rules": [
            {
                "t": "set",
                "p": "config.command",
                "pt": "msg",
                "to": "power",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 360,
        "wires": [
            [
                "6cd9128516fd4976"
            ]
        ]
    },
    {
        "id": "6b2b28135aade024",
        "type": "change",
        "z": "37c335b4644b5d52",
        "name": "off",
        "rules": [
            {
                "t": "set",
                "p": "config.command",
                "pt": "msg",
                "to": "power",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 400,
        "wires": [
            [
                "6cd9128516fd4976"
            ]
        ]
    },
    {
        "id": "09d6ef876f6fb7cb",
        "type": "change",
        "z": "37c335b4644b5d52",
        "name": "yellow",
        "rules": [
            {
                "t": "set",
                "p": "config.command",
                "pt": "msg",
                "to": "color",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "yellow",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 200,
        "wires": [
            [
                "6cd9128516fd4976"
            ]
        ]
    },
    {
        "id": "b999f44e734708b0",
        "type": "change",
        "z": "37c335b4644b5d52",
        "name": "red",
        "rules": [
            {
                "t": "set",
                "p": "config.command",
                "pt": "msg",
                "to": "color",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "red",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 160,
        "wires": [
            [
                "6cd9128516fd4976"
            ]
        ]
    },
    {
        "id": "e267b8811aa789d0",
        "type": "change",
        "z": "37c335b4644b5d52",
        "name": "blue",
        "rules": [
            {
                "t": "set",
                "p": "config.command",
                "pt": "msg",
                "to": "color",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "blue",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 120,
        "wires": [
            [
                "6cd9128516fd4976"
            ]
        ]
    },
    {
        "id": "b2cb77fd3a4bdf79",
        "type": "change",
        "z": "37c335b4644b5d52",
        "name": "green",
        "rules": [
            {
                "t": "set",
                "p": "config.command",
                "pt": "msg",
                "to": "color",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "green",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 240,
        "wires": [
            [
                "6cd9128516fd4976"
            ]
        ]
    },
    {
        "id": "8e71f48d600c5d15",
        "type": "change",
        "z": "37c335b4644b5d52",
        "name": "white",
        "rules": [
            {
                "t": "set",
                "p": "config.command",
                "pt": "msg",
                "to": "color",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "white",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 280,
        "wires": [
            [
                "6cd9128516fd4976"
            ]
        ]
    },
    {
        "id": "64bdd81be4768b26",
        "type": "change",
        "z": "37c335b4644b5d52",
        "name": "warmwhite",
        "rules": [
            {
                "t": "set",
                "p": "config.command",
                "pt": "msg",
                "to": "color",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "warmwhite",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 320,
        "wires": [
            [
                "6cd9128516fd4976"
            ]
        ]
    },
    {
        "id": "b346943cc4fe82ab",
        "type": "mqtt out",
        "z": "37c335b4644b5d52",
        "name": "Dynamical Action Injection into Voxta",
        "topic": "/noxyred/actions",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15376ac01e2f58cc",
        "x": 1130,
        "y": 520,
        "wires": []
    },
    {
        "id": "1c3ebf64c147d066",
        "type": "mqtt in",
        "z": "37c335b4644b5d52",
        "name": "",
        "topic": "/noxyred/triggers",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "15376ac01e2f58cc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 340,
        "y": 260,
        "wires": [
            [
                "499acd36a45e28d2"
            ]
        ]
    },
    {
        "id": "a3993abb39de3e8f",
        "type": "mqtt out",
        "z": "37c335b4644b5d52",
        "name": "Dynamical Context Injection into Voxta",
        "topic": "/noxyred/context",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "15376ac01e2f58cc",
        "x": 1130,
        "y": 680,
        "wires": []
    },
    {
        "id": "8bfa2d58f1a51475",
        "type": "voxta-context",
        "z": "37c335b4644b5d52",
        "name": "Context Injection",
        "contexts": [
            {
                "Name": "smart_lightbulb",
                "Text": "{{char}} has the control over a smart lightbulb that can change collors to: blue, red, yellow, green, white cool light or white warm light. {{char}} can also turn it on and off. {{char}} will only switch colors and turn the lights on or off according to the instructions of {{user}}.",
                "Disabled": false,
                "SetFlags": []
            }
        ],
        "x": 600,
        "y": 680,
        "wires": [
            [
                "a3993abb39de3e8f"
            ]
        ]
    },
    {
        "id": "5a7030af3194bfc7",
        "type": "change",
        "z": "37c335b4644b5d52",
        "name": "testing_smart_lightbulb",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "smart_lightbulb",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 600,
        "wires": [
            [
                "8bfa2d58f1a51475",
                "7a4c8a22cbe30fa0"
            ]
        ]
    },
    {
        "id": "499acd36a45e28d2",
        "type": "switch",
        "z": "37c335b4644b5d52",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "blue",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "red",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "yellow",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "green",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "white",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "warmwhite",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "turn_on",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "turn_off",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "intro",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 9,
        "x": 510,
        "y": 260,
        "wires": [
            [
                "e267b8811aa789d0"
            ],
            [
                "b999f44e734708b0"
            ],
            [
                "09d6ef876f6fb7cb"
            ],
            [
                "b2cb77fd3a4bdf79"
            ],
            [
                "8e71f48d600c5d15"
            ],
            [
                "64bdd81be4768b26"
            ],
            [
                "874f3b2a1bd17550"
            ],
            [
                "6b2b28135aade024"
            ],
            [
                "5a7030af3194bfc7"
            ]
        ]
    },
    {
        "id": "da955344b6517c48",
        "type": "comment",
        "z": "37c335b4644b5d52",
        "name": "Smart Bulb Commands",
        "info": "",
        "x": 920,
        "y": 80,
        "wires": []
    },
    {
        "id": "6cd9128516fd4976",
        "type": "tapo_new_actions",
        "z": "37c335b4644b5d52",
        "name": "Smart Bulb",
        "deviceIp": "192.168.1.42",
        "deviceAlias": "Smart Bulb",
        "deviceIpRange": "192.168.1.0/24",
        "searchMode": "ip",
        "command": "color",
        "version": "2",
        "x": 1190,
        "y": 240,
        "wires": [
            [
                "722af0f936f0de8b"
            ]
        ]
    },
    {
        "id": "d054b1a7af48379c",
        "type": "voxta-actions",
        "z": "37c335b4644b5d52",
        "name": "",
        "index": 1,
        "actions": [
            {
                "name": "blue",
                "description": "when {{char}} wants to turn the light bulb to the color blue",
                "layer": "default",
                "timing": "AfterAssistantMessage",
                "setFlags": [],
                "secret": "",
                "note": "",
                "cancelReply": false
            },
            {
                "name": "red",
                "description": "when {{char}} wants to turn the light bulb to the color red",
                "layer": "default",
                "timing": "AfterAssistantMessage",
                "setFlags": [],
                "secret": "",
                "note": "",
                "cancelReply": false
            },
            {
                "name": "yellow",
                "description": "when {{char}} wants to turn the light bulb to the color yellow",
                "layer": "default",
                "timing": "AfterAssistantMessage",
                "setFlags": [],
                "secret": "",
                "note": "",
                "cancelReply": false
            },
            {
                "name": "green",
                "description": "when {{char}} wants to turn the light bulb to the color green",
                "layer": "default",
                "timing": "AfterAssistantMessage",
                "setFlags": [],
                "secret": "",
                "note": "",
                "cancelReply": false
            },
            {
                "name": "white",
                "description": "when {{char}} wants to turn the light bulb to the color white",
                "layer": "default",
                "timing": "AfterAssistantMessage",
                "setFlags": [],
                "secret": "",
                "note": "",
                "cancelReply": false
            },
            {
                "name": "warmwhite",
                "description": "when {{char}} wants to turn the light bulb to the color warm white",
                "layer": "default",
                "timing": "AfterAssistantMessage",
                "setFlags": [],
                "secret": "",
                "note": "",
                "cancelReply": false
            },
            {
                "name": "on",
                "description": "when {{char}} wants to turn the light bulb on",
                "layer": "default",
                "timing": "AfterAssistantMessage",
                "setFlags": [],
                "secret": "",
                "note": "",
                "cancelReply": false
            },
            {
                "name": "off",
                "description": "when {{char}} wants to turn the light bulb off",
                "layer": "default",
                "timing": "AfterAssistantMessage",
                "setFlags": [],
                "secret": "",
                "note": "",
                "cancelReply": false
            }
        ],
        "x": 830,
        "y": 520,
        "wires": [
            [
                "b346943cc4fe82ab"
            ]
        ]
    },
    {
        "id": "7a4c8a22cbe30fa0",
        "type": "noxy-sequencer",
        "z": "37c335b4644b5d52",
        "name": "",
        "sequence": [
            {
                "type": "output",
                "outputType": "string",
                "value": "blue"
            },
            {
                "type": "delay",
                "from": "100",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "red"
            },
            {
                "type": "delay",
                "from": "100",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "yellow"
            },
            {
                "type": "delay",
                "from": "100",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "green"
            },
            {
                "type": "delay",
                "from": "100",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "white"
            },
            {
                "type": "delay",
                "from": "100",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "warmwhite"
            },
            {
                "type": "delay",
                "from": "100",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "on"
            },
            {
                "type": "delay",
                "from": "100",
                "to": "",
                "unit": "ms"
            },
            {
                "type": "output",
                "outputType": "string",
                "value": "off"
            }
        ],
        "outputs": 1,
        "outputLabels": [
            ""
        ],
        "x": 600,
        "y": 520,
        "wires": [
            [
                "d054b1a7af48379c"
            ]
        ]
    },
    {
        "id": "5b78b3aca2b78e1d",
        "type": "comment",
        "z": "37c335b4644b5d52",
        "name": "Action Routing",
        "info": "",
        "x": 530,
        "y": 160,
        "wires": []
    },
    {
        "id": "701bb1ba9832dacc",
        "type": "comment",
        "z": "37c335b4644b5d52",
        "name": "Injecting inicial Actions into Chat",
        "info": "",
        "x": 650,
        "y": 480,
        "wires": []
    },
    {
        "id": "646d276d324fc521",
        "type": "comment",
        "z": "37c335b4644b5d52",
        "name": "Injecting inicial Context into Chat",
        "info": "",
        "x": 650,
        "y": 640,
        "wires": []
    }
]